#!/usr/bin/env php
<?php

use League\Uri\UriParser;
use League\Uri\Components\Host;
use League\Uri\Components\Query;

/**
 * Format the text output
 * Inspired by Aura\Cli\Stdio\Formatter (https://github.com/auraphp/Aura.Cli)
 *
 * @param string $str
 *
 * @return string
 */
function outln($str)
{
    static $formatter;
    static $func;
    static $regex;
    static $codes = [
        'reset'      => '0',
        'bold'       => '1',
        'dim'        => '2',
        'underscore' => '4',
        'blink'      => '5',
        'reverse'    => '7',
        'hidden'     => '8',
        'black'      => '30',
        'red'        => '31',
        'green'      => '32',
        'yellow'     => '33',
        'blue'       => '34',
        'magenta'    => '35',
        'cyan'       => '36',
        'white'      => '37',
        'blackbg'    => '40',
        'redbg'      => '41',
        'greenbg'    => '42',
        'yellowbg'   => '43',
        'bluebg'     => '44',
        'magentabg'  => '45',
        'cyanbg'     => '46',
        'whitebg'    => '47',
    ];

    if (null !== $regex) {
        return ' '.$func($regex, $formatter, $str).PHP_EOL;
    }

    $regex = ',<<\s*((('.implode('|', array_keys($codes)).')(\s*))+)>>,Umsi';
    $formatter = '';
    $func = 'preg_replace';
    if (false === strpos(strtolower(PHP_OS), 'win')) {
        $formatter = function (array $matches) use ($codes) {
            $str = preg_replace('/(\s+)/msi', ';', $matches[1]);

            return chr(27) . '[' . strtr($str, $codes) . 'm';
        };
        $func = 'preg_replace_callback';
    }

    return ' '.$func($regex, $formatter, $str).PHP_EOL;
}

if (PHP_SAPI !== 'cli') {
    die('This script should be invoked via the CLI version of PHP, not the '.PHP_SAPI.' SAPI');
}

$autoload = dirname(__DIR__).'/vendor/autoload.php';
if (!file_exists($autoload)) {
    $autoload = realpath(dirname(__DIR__).'/../../autoload.php');
    if (!file_exists($autoload)) {
        echo outln('<<redbg white>>You must set up the project dependencies, using composer: <<reset>>');
        echo outln('<<green>>Usage: <<reset>>php composer install');
        echo PHP_EOL;
        die(65);
    }
}

require $autoload;

if ($argc < 2) {
    echo PHP_EOL;
    echo outln('<<redbg white>>[ERROR] argument error: <<bold>> The URI is missing <<reset>>');
    echo outln('<<green>>Usage: <<reset>>php bin/parse "scheme://host/path?query=#f"');
    echo PHP_EOL;
    die(65);
}

$uri = $argv[1];
echo PHP_EOL;
echo outln('<<yellow>>Uri informations');
echo outln('<<reset>><<yellow>>================<<reset>>');
try {
    echo outln('<<cyan>>Submitted URI<<reset>> : '.$uri);

    //1 - Parse URI
    $components = (new UriParser())->__invoke($uri);
    echo PHP_EOL.outln('<<yellow>>Uri component informations');
    echo outln('<<reset>><<yellow>>----------------------<<reset>>');
    foreach ($components as $name => $value) {
        echo outln('<<cyan>>'.sprintf("%-9s", $name).'<<reset>>: '.('' != $value ? $value : '<<magenta>>N/A<<reset>>'));
    }

    //2 - Host Infos
    if ('' != $components['host']) {
        echo PHP_EOL;
        echo outln('<<yellow>>Additional host component informations');
        echo outln('<<reset>><<yellow>>----------------------<<reset>>');
        $host = new Host($components['host']);
        if (!$host->isIp()) {
            $infos = [
                'Type' => '<<dim>>hostname<<reset>>',
                'Registerable Domain' => $host->getRegisterableDomain() ? $host->getRegisterableDomain() : '<<magenta>>N/A<<reset>>',
                'Sub Domain' => $host->getSubDomain() ? $host->getSubDomain() : '<<magenta>>N/A<<reset>>',
                'Public suffix' => $host->getPublicSuffix() ? $host->getPublicSuffix() : '<<magenta>>N/A<<reset>>',
                'Is valid suffix' => $host->isPublicSuffixValid() ? '<<green>>yes<<reset>>' : '<<red>>no<<reset>>',
                'Is a FQDN' => $host->isAbsolute() ? '<<green>>yes<<reset>>' : '<<red>>no<<reset>>',
            ];
        } else {
            $infos = [
                'Type' => '<<dim>>IP<<reset>>',
                'IP Type' => $host->isIpv4() ? 'IPv4' : 'IPv6',
                'IP' => $host->getLiteral(),
                'IP has a zone ID' => $host->hasZoneIdentifier() ? '<<green>>yes<<reset>>' : '<<red>>no<<reset>>',
            ];
            if ($host->hasZoneIdentifier()) {
                $infos['IP without zone ID'] = $host->withoutZoneIdentifier()->getLiteral();
            }
        }

        foreach ($infos as $name => $value) {
            echo outln('<<cyan>>'.sprintf("%-20s", $name).'<<reset>>: '.$value);
        }
    }

    //2 - Query Infos
    if ('' != $components['query']) {
        echo PHP_EOL;
        echo outln('<<yellow>>Additional query component informations');
        echo outln('<<reset>><<yellow>>----------------------<<reset>>');
        $query = (new Query($components['query']))->ksort();
        $length = 0;
        foreach ($query->keys() as $name) {
            $keyLength = strlen($name);
            if ($keyLength > $length) {
                $length = $keyLength;
            }
        }
        $format = "%-".$length."s";
        foreach ($query as $name => $value) {
            if (null === $value) {
                $value = '<<magenta>>[null]<<reset>>';
            } elseif ('' === $value) {
                $value = '<<magenta>>[empty string]<<reset>>';
            } elseif (is_array($value)) {
                $i = 0;
                $ret = [];
                foreach ($value as $val) {
                    if (null === $val) {
                        $val = '<<magenta>>[null]<<reset>>';
                    } elseif ('' === $val) {
                        $val = '<<magenta>>[empty string]<<reset>>';
                    }
                    $ret[] = (0 == $i) ? $val : str_repeat(' ', $length+2).': '.$val;
                    $i++;
                }
                $value = implode(PHP_EOL, $ret);
            }
            echo outln('<<cyan>>'.sprintf($format, $name).'<<reset>> : '.$value);
        }
    }
    echo PHP_EOL;
    die(0);
} catch (Exception $e) {
    echo PHP_EOL;
    echo outln('<<redbg white>>[ERROR] Parsing error: <<bold>>'.$e->getMessage().'<<reset>>');
    echo PHP_EOL;
    die(1);
}